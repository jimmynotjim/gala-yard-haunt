[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "my-pi-project" # TODO: Update with your project name
version = "0.1.0"
description = "A Pythonic starter for your Raspberry Pi projects"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
  { name = "Your Name", email = "your.email@example.com" }, # TODO: Update with your info
]
dependencies = ["python-dotenv>=1.0.0"]

[project.optional-dependencies]
dev = [
  "ruff>=0.1.0",
  "mypy>=1.7.0",
  "pre-commit>=3.5.0",
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
]
pi = ["RPi.GPIO>=0.7.1", "gpiozero>=2.0", "picamera2>=0.3.12"]

[project.urls]
Homepage = "https://github.com/YOUR-USERNAME/YOUR-PROJECT-NAME"   # TODO: Update
Repository = "https://github.com/YOUR-USERNAME/YOUR-PROJECT-NAME" # TODO: Update

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Allow unused imports in __init__.py

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
mypy_path = "typings"
#exclude = ["examples/"]

# Ignore missing imports for libraries without type stubs
[[tool.mypy.overrides]]
module = ["RPi.*", "gpiozero.*", "rpi_ws281x.*", "picamera2.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--verbose",
  "--cov=src",
  "--cov-report=term-missing",
  "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
